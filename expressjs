{
	"Express Router with Controller and Repository": {
	  "prefix": "exrouter",
	  "body": [
		"// router/$1.routes.js",
		"const express = require('express');",
		"const router = express.Router();",
		"const ${1:entity}Controller = require('../controllers/${1:entity}.controller');",
		"",
		"router.get('/', ${1:entity}Controller.getAll);",
		"router.get('/:id', ${1:entity}Controller.getById);",
		"router.post('/', ${1:entity}Controller.create);",
		"router.put('/:id', ${1:entity}Controller.update);",
		"router.delete('/:id', ${1:entity}Controller.remove);",
		"",
		"module.exports = router;"
	  ],
	  "description": "Express Router file with standard CRUD routes"
	},
	"Express Controller with Repository": {
	  "prefix": "excontroller",
	  "body": [
		"// controllers/$1.controller.js",
		"const ${1:entity}Repo = require('../repositories/${1:entity}.repository');",
		"",
		"exports.getAll = async (req, res) => {",
		"  const data = await ${1:entity}Repo.getAll();",
		"  res.json(data);",
		"};",
		"",
		"exports.getById = async (req, res) => {",
		"  const data = await ${1:entity}Repo.getById(req.params.id);",
		"  res.json(data);",
		"};",
		"",
		"exports.create = async (req, res) => {",
		"  const data = await ${1:entity}Repo.create(req.body);",
		"  res.status(201).json(data);",
		"};",
		"",
		"exports.update = async (req, res) => {",
		"  const data = await ${1:entity}Repo.update(req.params.id, req.body);",
		"  res.json(data);",
		"};",
		"",
		"exports.remove = async (req, res) => {",
		"  await ${1:entity}Repo.remove(req.params.id);",
		"  res.status(204).end();",
		"};"
	  ],
	  "description": "Controller using a repository with CRUD methods"
	},
	"Express Repository Template": {
	  "prefix": "exrepo",
	  "body": [
		"// repositories/$1.repository.js",
		"// You can replace this with actual DB logic",
		"const data = [];",
		"",
		"exports.getAll = async () => data;",
		"",
		"exports.getById = async (id) => data.find(item => item.id === id);",
		"",
		"exports.create = async (item) => {",
		"  item.id = data.length + 1;",
		"  data.push(item);",
		"  return item;",
		"};",
		"",
		"exports.update = async (id, updatedItem) => {",
		"  const index = data.findIndex(item => item.id === id);",
		"  if (index !== -1) {",
		"    data[index] = { ...data[index], ...updatedItem };",
		"    return data[index];",
		"  }",
		"  return null;",
		"};",
		"",
		"exports.remove = async (id) => {",
		"  const index = data.findIndex(item => item.id === id);",
		"  if (index !== -1) data.splice(index, 1);",
		"};"
	  ],
	  "description": "Simple in-memory repository logic"
	},
	"Simple Async Function with error handling": {
	  "prefix": "asyncfnerr",
	  "body": [
		"const ${1:fetchData} = async (${2:params}) => {",
		"  try {",
		"    // your logic here",
		"    const result = await ${3:someAsyncOperation}(${2:params});",
		"    return result;",
		"  } catch (error) {",
		"    console.error('Error in ${1:fetchData}:', error);",
		"    throw error;",
		"  }",
		"};",
	  ],
	  "description": "Template for simple async function with error handling"
	},
	"Simple Async Function": {
		"prefix": "asyncfn",
		"body": [
		  "const fetchData = async (params) => {",
		  "    // your logic here",
		  "    const result = await someAsyncOperation(params);",
		  "    return result;",
		  "};",
		],
		"description": "Template for simple async function"
	  }
  }
  
